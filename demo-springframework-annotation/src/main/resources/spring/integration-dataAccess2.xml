<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c="http://www.springframework.org/schema/c" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:jms="http://www.springframework.org/schema/jms" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:oxm="http://www.springframework.org/schema/oxm" xmlns:redis="http://www.springframework.org/schema/redis"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd 
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd 
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd 
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd 
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd  
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd 
        http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms.xsd 
        http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm.xsd 
        http://www.springframework.org/schema/redis http://www.springframework.org/schema/redis/spring-redis.xsd">

	<!-- ==========A.Data Access:JDBC========== -->
	<!-- ==========B:Data Access:ORM:MyBatis========== -->
	<!-- ==========C.Data Access:Transaction:DataSourceTransaction========== -->
	<!-- enable the configuration of transactional behavior based on annotations -->
	<tx:annotation-driven transaction-manager="txManager"
		mode="proxy" proxy-target-class="false" order="2" />

	<!-- a PlatformTransactionManager is still required -->
	<!-- PlatformTransactionManager:DataSourceTransactionManager|HibernateTransactionManager|JtaTransactionManager -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<bean id="dataSource2" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 连接池中保留的最小连接数。 -->
		<property name="minPoolSize" value="10" />
		<!-- 连接池中保留的最大连接数。Default:15 -->
		<property name="maxPoolSize" value="100" />
		<!-- 最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default:0 -->
		<property name="maxIdleTime" value="1800" />
		<!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default:3 -->
		<property name="acquireIncrement" value="3" />
		<property name="maxStatements" value="1000" />
		<property name="initialPoolSize" value="10" />
		<!-- 每60秒检查所有连接池中的空闲连接。Default:0 -->
		<property name="idleConnectionTestPeriod" value="60" />
		<!-- 定义在从数据库获取新连接失败后重复尝试的次数。Default:30 -->
		<property name="acquireRetryAttempts" value="30" />
		<property name="breakAfterAcquireFailure" value="true" />
		<property name="testConnectionOnCheckout" value="false" />
	</bean>

	<!-- H2/HSQL/DERBY -->
	<jdbc:embedded-database id="dataSource3" type="H2"
		generate-name="true">
		<jdbc:script location="classpath:db-schema.sql" />
		<jdbc:script location="classpath:db-test-data.sql" />
	</jdbc:embedded-database>
	<jdbc:initialize-database data-source="dataSource3">
		<jdbc:script location="classpath:db-schema.sql" />
		<jdbc:script location="classpath:db-test-data.sql" />
	</jdbc:initialize-database>
	
	<!-- ==========D.Data Access:OXM========== -->
	<oxm:castor-marshaller id="castorMarshaller"
		mapping-location="classpath:user.xml" />
	<!-- 等价于上面 -->
	<!-- <bean id="castorMarshaller" class="org.springframework.oxm.castor.CastorMarshaller" /> -->

	<!-- ==========D.Data Access:Redis========== -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
		p:connection-factory-ref="jedisConnectionFactory"
		p:enable-transaction-support="true" p:key-serializer-ref="stringRedisSerializer"
		p:value-serializer-ref="stringRedisSerializer"
		p:hashKey-serializer-ref="stringRedisSerializer"
		p:hashValue-serializer-ref="stringRedisSerializer" />
	
	<bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate"
		p:connection-factory-ref="jedisConnectionFactory" p:enable-transaction-support="true"/>
	
	<bean id="stringRedisSerializer"
		class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		
	<!-- Redis Messaging Receiver:RedisMessageListenerContainer -->
	<redis:listener-container connection-factory="redisConnectionFactory"
		topic-serializer="stringRedisSerializer">
		<!-- the method attribute can be skipped as the default method name is 
			"handleMessage" -->
		<redis:listener ref="myRedisMessageListener1" topic="myChannel"
			serializer="stringRedisSerializer" />
		<redis:listener ref="myRedisMessageListener2" method="handleMessage"
			topic="myChannel" serializer="stringRedisSerializer" />
	</redis:listener-container>

	<!-- 等价于上面 -->
	<!-- <bean id="redisMessageListenerContainer"
		class="org.springframework.data.redis.listener.RedisMessageListenerContainer">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
		<property name="messageListeners">
			<map>
				<entry key-ref="myRedisMessageListener1">
					<bean class="org.springframework.data.redis.listener.ChannelTopic">
						<constructor-arg value="myChannel" />
					</bean>
				</entry>
			</map>
		</property>
	</bean> -->
	
	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		p:host-name="localhost" p:port="6379" p:use-pool="true"
		p:pool-config-ref="jedisPoolConfig" />
	
	<!-- <bean id="lettuceConnectionFactory" class="org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory" 
		p:host-name="localhost" p:port="6379" /> -->

	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="32" />
		<property name="maxIdle" value="6" />
		<property name="testOnBorrow" value="true" />
	</bean>

	<bean id="sentinelConfiguration"
		class="org.springframework.data.redis.connection.RedisSentinelConfiguration">
		<property name="master" value="myMaster" />
		<property name="sentinels">
			<set>
				<bean class="org.springframework.data.redis.connection.RedisNode"
					p:host="localhost" p:port="26379" />
				<bean class="org.springframework.data.redis.connection.RedisNode"
					p:host="localhost" p:port="26380" />
			</set>
		</property>
	</bean>

	<bean id="clusterConfiguration"
		class="org.springframework.data.redis.connection.RedisClusterConfiguration">
		<property name="maxRedirects" value="" />
		<property name="clusterNodes">
			<set>
				<bean class="org.springframework.data.redis.connection.RedisNode"
					p:host="localhost" p:port="6379" />
				<bean class="org.springframework.data.redis.connection.RedisNode"
					p:host="localhost" p:port="6380" />
			</set>
		</property>
	</bean>

	<!-- ==========E.JMS Integration========== -->
	<!-- JMS Sender:Client and JMSTemplate -->
	<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<property name="connectionFactory" ref="jmsConnectionFactory" />
		<property name="pubSubDomain" value="false" />
		<property name="receiveTimeout" value="2000" />
		<property name="defaultDestination" ref="activeMQQueue1" />
		<property name="messageConverter" ref="myMessageConverter" />
		<property name="sessionTransacted" value="true" />
	</bean>

	<!-- JMS Receiver -->
	<jms:annotation-driven />

	<!-- @JmsListener | DefaultJmsListenerContainerFactory -->
	<jms:listener-container connection-factory="jmsConnectionFactory"
		factory-id="jmsListenerContainerFactory" message-converter="myMessageConverter"
		destination-type="queue" receive-timeout="1000" transaction-manager="jmsTransactionManager"
		concurrency="3-10" />
	<!-- 等价于上面 -->
	<!-- <bean id="jmsListenerContainerFactory" class="org.springframework.jms.config.DefaultJmsListenerContainerFactory"> 
		<property name="connectionFactory" ref="activeMQConnectionFactory" /> <property 
		name="destinationResolver" ref="destinationResolver" /> <property name="concurrency" 
		value="3-10" /> </bean> -->
	
	<!-- JMS Common:ConnectionFactory, Destination, MessageConverter and Transaction -->
	<bean id="jmsTransactionManager"
		class="org.springframework.jms.connection.JmsTransactionManager">
		<property name="connectionFactory" ref="jmsConnectionFactory" />
	</bean>

	<!-- ConnectionFactory->Connection->Session->MessageProducer->send -->
	<bean id="jmsConnectionFactory"
		class="org.springframework.jms.connection.CachingConnectionFactory">
		<property name="targetConnectionFactory" ref="pooledConnectionFactory" />
	</bean>

	<bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory">
		<property name="connectionFactory" ref="activeMQConnectionFactory" />
		<property name="maxConnections" value="10" />
	</bean>

	<bean id="activeMQConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL" value="tcp://localhost:61616" />
	</bean>

	<bean id="activeMQQueue1" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg value="qqq1" />
	</bean>

	<bean id="activeMQQueue2" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg value="qqq2" />
	</bean>

	<bean id="activeMQQueue3" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg value="qqq3" />
	</bean>

	<bean id="activeMQTopic" class="org.apache.activemq.command.ActiveMQTopic">
		<constructor-arg value="ttt" />
	</bean>

	<!-- ==========E.Email Integration========== -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.163.com" />
		<property name="username" value="ruanweiqq@163.com" />
		<property name="password" value="ilovelingling" />
	</bean>
	
	<!-- ==========F.Task Execution and Scheduling========== -->
	<!-- @Async|@Scheduled -->
	<task:annotation-driven executor="myExecutor"
		scheduler="myScheduler" exception-handler="myAsyncUncaughtExceptionHandler" />

	<!-- create a ThreadPoolTaskExecutor instance -->
	<task:executor id="myExecutor" pool-size="5-10"
		keep-alive="120" queue-capacity="100" rejection-policy="CALLER_RUNS" />

	<!-- create a ThreadPoolTaskScheduler instance -->
	<task:scheduler id="myScheduler" pool-size="10" />

	<bean id="myAsyncUncaughtExceptionHandler"
		class="org.ruanwei.demo.springframework.integration.scheduling.MyAsyncUncaughtExceptionHandler" />

	<!-- more bean definitions go here -->

</beans>