<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c="http://www.springframework.org/schema/c" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:jms="http://www.springframework.org/schema/jms" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:oxm="http://www.springframework.org/schema/oxm" xmlns:redis="http://www.springframework.org/schema/redis"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd 
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd 
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd 
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd 
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd  
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd 
        http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms.xsd 
        http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm.xsd 
        http://www.springframework.org/schema/redis http://www.springframework.org/schema/redis/spring-redis.xsd">

	<!-- ==========A.Data Access:JDBC========== -->
	<!-- DataSource:HSQL/H2/DERBY -->
	<jdbc:embedded-database id="dataSource" type="H2"
		generate-name="true">
		<jdbc:script location="classpath:db/db-schema.sql" />
		<jdbc:script location="classpath:db/db-test-data.sql" />
	</jdbc:embedded-database>

	<!-- DataSource:pure jdbc -->
	<!-- should only be used for testing purposes since it does not provide 
		pooling -->
	<bean id="dataSource1"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource" primary="true">
		<qualifier value="firstTarget"/>
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<!-- polled-DataSource:dbcp2, see PoolingDataSource -->
	<bean id="dataSource2" class="org.apache.commons.dbcp2.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
		<property name="initialSize" value="10" />
        <property name="maxTotal" value="100" />
        <property name="maxIdle" value="100" />
        <property name="maxWaitMillis" value="-1" />
	</bean>

	<!-- polled-DataSource:c3p0 -->
	<bean id="dataSource3" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
		<!-- 连接池中保留的最小连接数。 -->
		<property name="minPoolSize" value="10" />
		<!-- 连接池中保留的最大连接数。Default:15 -->
		<property name="maxPoolSize" value="100" />
		<!-- 最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default:0 -->
		<property name="maxIdleTime" value="1800" />
		<!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default:3 -->
		<property name="acquireIncrement" value="3" />
		<property name="maxStatements" value="1000" />
		<property name="initialPoolSize" value="10" />
		<!-- 每60秒检查所有连接池中的空闲连接。Default:0 -->
		<property name="idleConnectionTestPeriod" value="60" />
		<!-- 定义在从数据库获取新连接失败后重复尝试的次数。Default:30 -->
		<property name="acquireRetryAttempts" value="30" />
		<property name="breakAfterAcquireFailure" value="true" />
		<property name="testConnectionOnCheckout" value="false" />
	</bean>

	<jdbc:initialize-database data-source="dataSource">
		<jdbc:script location="classpath:db/db-schema.sql" />
		<jdbc:script location="classpath:db/db-test-data.sql" />
	</jdbc:initialize-database>

	<!-- ==========A.Data Access:TransactionManager========== -->
	<tx:annotation-driven transaction-manager="txManager" />
	
	<!-- PlatformTransactionManager:DataSourceTransactionManager|HibernateTransactionManager|JtaTransactionManager -->
	<!-- local transaction manager for jdbc -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource1" />
	</bean>

	<!-- global transaction manager -->
	<bean id="globalTxManager"
		class="org.springframework.transaction.jta.JtaTransactionManager"  lazy-init="true" />

	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<!-- all methods starting with 'find' are read-only -->
			<tx:method name="find*" read-only="true" propagation="REQUIRED"
				isolation="DEFAULT" rollback-for="UnsupportedOperationException" />
			<!-- other methods use the default transaction settings (see below) -->
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut id="daoPointcut"
			expression="execution(* org.ruanwei.demo.springframework.dataAccess.jdbc.JdbcDAO.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="daoPointcut"
			order="2" />
		<!-- execute before the transactional advice (hence the lower order number) -->
		<!-- <aop:aspect id="myAspect3" ref="myAdvice" order="1"> <aop:pointcut 
			id="daoPointcut2" expression="execution(* org.ruanwei.demo.springframework.dataAccess.jdbc.JdbcDAO.*(..)) 
			and args(name,age)" /> <aop:around pointcut-ref="daoPointcut2" method="profile" 
			/> </aop:aspect> -->
	</aop:config>

	<!-- ==========A.Data Access:DAO========== -->

	<!-- more bean definitions go here -->

</beans>